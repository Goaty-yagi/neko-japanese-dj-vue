"""
Django settings for quiz_api project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import environ
import json
from datetime import timedelta
# from django.utils.crypto import get_random_string
# chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
# JWF_SECRET_KEY = get_random_string(100, chars)

# import django_heroku
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
JWF_SECRET_KEY = env('JWF_SECRET_KEY')

FRONT_ORIGIN = env('FRONT_ORIGIN')
VERIFICATION_URL = env('VERIFICATION_URL')
PASSWORD_CHANGE_URL = env('PASSWORD_CHANGE_URL')
SECRET_KEY = env('SECRET_KEY')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'cloudinary',
    'quiz',
    'user',
    'board',
    'log',
    'enquire',
    'notification',

    # 'rest_framework.authtoken',
    'django.contrib.sites',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',


    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'django_cleanup.apps.CleanupConfig',

    

    'djoser',
    'corsheaders',
    # 'sslserver',
    'django_celery_results',
    'django_celery_beat',

    'templates'
]

ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
ACCOUNT_USERNAME_REQUIRED = True 
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True

# allauth google provisder config
SOCIALACCOUNT_PROVIDER = {
    'google': {
        'SCOPE': [
            'profile',
            'email'
        ],
        'AUTH_PARAMS': {
            'access_type': 'online'
        },
    }
}
SOCIALACCOUNT_EMAIL_VARIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = False

# SOCIALACCOUNT_ADAPTER = 'user.apis.CustomAdapter'

# dj-rest-auth config
SITE_ID = 1
JWT_AUTH_SECURE = False
# JWT_AUTH_HTTPONLY = True if True, refresh_token will be empty
JWT_AUTH_SAMESITE = None
REST_USE_JWT = True
REST_AUTH_SERIALIZERS = {
    # "JWT_SERIALIZER" : 'quiz_project_back.user.serializers.Jwtserializer'
    'USER_DETAILS_SERIALIZER' :'user.serializers.UserSerializer',
    'LOGIN_SERIALIZER' :'user.serializers.CustomLoginSerializer'
}
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'user.serializers.CustomRegisterSerializer'
}

JWT_AUTH_COOKIE = 'access_token'
JWT_AUTH_REFRESH_COOKIE = 'refresh-token'

# auth user model confi
AUTH_USER_MODEL = 'user.User'

# simple_JWT config
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer','JWT'),
    'SIGNING_KEY': JWF_SECRET_KEY,
    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=90),
    'ROTATE_REFRESH_TOKENS' : True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'USER_ID_FIELD': 'UID',
    'USER_ID_CLAIM': 'user_id'
}
# rest framework config
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES' : [
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_AUTENTICATION_CLASSES' : (
        # 'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTStatelessUserAuthentication',
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        # 'rest_framework.authentication.SessionAuthentication'
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M",
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE':8,
}

AUTHENTICATION_BACKENDS = [
     'django.contrib.auth.backends.ModelBackend',
    #  'user.backends.EmailAuthBackend',    
]
# AUTHENTICATION_BACKENDS = ['user.backends.JWTAuthenticationBackend']
# REST_AUTH_TOKEN_MODEL = False

MIDDLEWARE = [
    'quiz_api.middlewares.AccessRestrictMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',

    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'quiz_api.middlewares.JWTAuthMiddleware',
    
]

REST_SESSION_LOGIN = False
# django_heroku.settings(locals())


# SMTP Configrations
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_POUT = '587'
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'neko222japanese@gmail.com'
EMAIL_HOST_PASSWORD = 'oselbohcixpwcqvm'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

INTERNAL_IPS = ['127.0.0.1']

ROOT_URLCONF = 'quiz_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quiz_api.wsgi.application'

# CSRF_COOKIES_SAMESITE = "Lax"
# SESSION_COOKIES_SAMESITE = "Lax"
# CSRF_COOKIES_HTTPONLY = True
# SESSION_COOKIE_HTTPONLY = True
CORS_ALLOW_CREDENTIALS = True

CROS_EXPOSE_HEADERS = ["Content-Type","X-CSRFToken"]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

import dj_database_url
MAX_CONN_AGE = 600

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3")
    }
}

if "DATABASE_URL" in os.environ:
    # Configure Django for DATABASE_URL environment variable.
    DATABASES["default"] = dj_database_url.config(
        conn_max_age=MAX_CONN_AGE, ssl_require=True)

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'dist/static'),
)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR , 'media/'
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CELERY_BROKER_URL = 'redis://127.0.0.1:6379'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
from celery.schedules import crontab
# CELERY_BEAT_SCHEDULE = {
#     'debug_task': {
#         'task': 'quiz_api.selery.debug_task',
#         'schedule': crontab()  # execute every minute
#     }
# }
